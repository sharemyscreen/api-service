api:
  name: ShareMyScreen API service
  description: |
    The api service of ShareMyScreen, allows user (througt registred client) to interact and use the ShareMyScreen service.
    To access resources from the api service, the *OAuth2 Authorization Framework* as been implemented. For more information, check the {{RFC 6749!https://tools.ietf.org/html/rfc6749}}.;;;
    The login service is available here : {{login.sharemyscreen.fr:3000!http://login.sharemyscreen.fr:3000}} and its documentation {{here!http://login.sharemyscreen.fr:3000/doc}};;;
    The api service is available here : {{api.sharemyscreen.fr:3000!http://api.sharemyscreen.fr:3000}}

  paragraphs:
    -
      Information:
        text: |
          The api service of ShareMyScreen, allows user (througt registred client) to interact and use the ShareMyScreen service.
          To access resources from the api service, the *OAuth2 Authorization Framework* as been implemented. For more information, check the {{RFC 6749!https://tools.ietf.org/html/rfc6749}}.;;;
    -
      Authorization:
        text: |
          All requests sent to the api service MUST be authorized with an *Access token* (of type bearer).;;;
          The steps to obtain an access token are explained in the {{login service documentation!http://login.sharemyscreen.fr:3000/doc}};;;
          Once you get your access token, you will need to include it in the **HTTP Header** of the requests:;;;
          ```
          Authorization: Bearer <access_token>
          ```
          If a request is unauthenticated, the server will reply a status code **403** with a body **Unauthorized**.
    -
      Request and Reply format:
        text: |
          All requests must be **HTTP** request.;;;
          Request body must be **JSON** formated.;;;
          Reply are **JSON** formated object in **snake_case**.

  tags:
    -
      Bearer Auth:
        link: paragraph-authorization

  routes:
    -
      User:
        text: |
          User related requests
        url:
          -
            /v1/user/{publicId}:
              get:
                summary: Get user information.
                description: If {publicId} is equal to 'me', return the current user information.
                tags:
                  - Bearer Auth
                responses:
                  -
                    200:
                      description: Ok
                      type: User
                errors:
                  - User not found
              patch:
                summary: Update user information.
                description: /!\ {publicId} MUST be set to 'me' or reply will be a 404 not found
                tags:
                  - Bearer Auth
                parameters:
                  -
                    email:
                      description: The new user email
                      required: false
                      in: body
                      type: string
                  -
                    first_name:
                      description: The new user first name
                      required: false
                      in: body
                      type: string
                  -
                    last_name:
                      description: The new user last name
                      required: false
                      in: body
                      type: string
                responses:
                  -
                    200:
                      description: Update success
                      type: User
                errors:
                  - Invalid update
              delete:
                summary: Delete the user
                description: /!\ {publicId} MUST be set to 'me' or reply will be a 404 not found
                tags:
                  - Bearer Auth
                responses:
                  -
                    200:
                      description: User deleted
                      type: string
          -
            /v1/user/search/{partial_email}:
              get:
                summary: Search for users by email (partial)
                tags:
                  - Bearer Auth
                responses:
                  -
                    200:
                      description: Search result
                      type: User Array

  errors:
    -
      Invalid request:
        status: 400
        code: 1
        message: Invalid request
        fix: Check the request parameters twice
    -
      Invalid update:
        status: 400
        code: 4
        subcode: 1
        message: You cannot update email with a external api registration
        fix: You can't update the email of an user registred with an external api
    -
      User not found:
        status: 404
        code: 2
        subcode: 1
        message: Unable to find user
        fix: Check user publicId twice

  objects:
    -
      Error:
        description: Error object (sub_code is facultative)
        obj:
          code: 0
          sub_code: 0
          message: ""
    -
      User:
        description: User object
        obj:
          public_id: ""
          email: ""
          first_name: ""
          last_name: ""
          organization:
            -
              array
    -
      User Array:
        description: Array of User object
        obj:
          -
            public_id: ""
            email: ""
            first_name: ""
            last_name: ""
            organization:
              -
                array